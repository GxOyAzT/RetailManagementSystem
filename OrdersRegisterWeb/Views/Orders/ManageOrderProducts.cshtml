@model List<ManageOrderProdVM>

    <div style="width: 100%; position: relative; background: green;">
        <div class="ListManageOrderProduct">
            <form method="post">
                <div class="LMOPGeneralData">
                    <button class="LMOPSybmitButton" >
                        <img src="~/images/icons/pencilIcon.png"/>
                    </button>
                    <div class="LMOPGDTotalPrice">
                        <img src="~/images/icons/dollarIcon.png" alt="">
                        <input id="InputOrderTotal" value="@(Math.Round(Model.Sum(e => e.ProductBasicsModel.ProductStorageModel.QuantityInBox * e.ProductBasicsModel.ProductPriceModel.Price * e.NewOrderedQua), 2)) $" />
                    </div>
                    <div class="LMOPGDOrderName">
                        <img src="~/images/icons/orderIcon.png" alt="">
                        <p>@(ViewBag.OrderName)</p>
                    </div>
                </div>
                @for (int i = 0; i < Model.Count; i++)
                {
                    <input hidden asp-for="@Model[i].ProductBasicsModel.Id" />
                    <input hidden asp-for="@Model[i].OrderId" />
                    <div class="ListManageOrderProductItem">
                        <input id="@("InputBoxPrice" + i.ToString())" hidden type="text" value="@(Math.Round(Model[i].ProductBasicsModel.ProductStorageModel.QuantityInBox * Model[i].ProductBasicsModel.ProductPriceModel.Price, 2).ToString().Replace(',', '.'))" />
                        <div class="LMOPIProducerProductName">
                            <label class="LMOPIProducer">@(Model[i].ProductBasicsModel.ProducerModel.CompanyName)</label>
                            <label class="LMOPIProductName">@(Model[i].ProductBasicsModel.ShortName)</label>
                        </div>
                        <div class="LMOPIBarecode">
                            <label>@(Model[i].ProductBasicsModel.Barecode)</label>
                        </div>
                        <div class="LMOPIRetialBoxPrice">
                            <label class="LMOPIRetailPrice">@(Math.Round(Model[i].ProductBasicsModel.ProductPriceModel.Price ,2)) $ x @(Model[i].ProductBasicsModel.ProductStorageModel.QuantityInBox) = @(Math.Round(Model[i].ProductBasicsModel.ProductStorageModel.QuantityInBox * Model[i].ProductBasicsModel.ProductPriceModel.Price, 2)) $</label>
                        </div>
                        <div class="Quantity">
                            <div class="QuantityButtonDecrement" onclick="DecrementOrderQuantity('@i')">
                                <img src="~/images/icons/decrementIcon.png"/>
                            </div>
                            <div class="QuantityInput">
                                <input id="@("QuantityInput" + i.ToString())" class="LabelInQuantityLabel" readonly value="@(Model[i].NewOrderedQua)" asp-for="@Model[i].NewOrderedQua" />
                            </div>
                            <div class="QuantityButtonIncrement" onclick="IncrementOrderQuantity('@i')">
                                <img src="~/images/icons/incrementIcon.png"/>
                            </div>
                        </div>
                        <div class="LMOPITotalPrice">
                            <input id="@("InputTotalProductPrice" + i.ToString())" readonly value="@(Math.Round(Model[i].NewOrderedQua * Model[i].ProductBasicsModel.ProductPriceModel.Price * Model[i].ProductBasicsModel.ProductStorageModel.QuantityInBox, 2)) $" />
                        </div>
                    </div>
                }
            </form>
        </div>
    </div>
<script src="@Url.Content("~/scripts/ManageOrderProductsScript.js")"></script>
