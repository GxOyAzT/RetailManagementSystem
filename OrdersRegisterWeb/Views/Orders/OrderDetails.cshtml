@model OrderDetailsViewModel

<div class="OrderDetailsView">
    <input hidden asp-for="OrderModel.Id">
    <input hidden asp-for="OrderModel.IsConfirmed">
    <input hidden asp-for="OrderModel.ConfirmationDate">
    <div class="ODVTopContainer">
        <div class="ODVTCOrderName">@Model.OrderModel.OrderUqName</div>
        <div class="ODVTCButtonsContainer">
            <a class="ODVTCBCButton" asp-action="ManageOrderProducts" asp-route-orderId="@(Model.OrderModel.Id.ToString())">
                <div>Manage</div>
            </a>
            <a class="ODVTCBCButton" asp-action="ConfirmOrder" asp-route-orderId="@(Model.OrderModel.Id.ToString())">
                <div>Confirm</div>
            </a>
        </div>
    </div>

    <div class="ODVListContainer">
        @foreach (var item in Model.OrderProductModels)
        {
            <div class="ODVLCItem">
                @(item.ProductBasicsModel.Name),
                @(item.ProductBasicsModel.ProducerModel.CompanyName),
                @(item.ProductBasicsModel.ProductPriceModel.Price.ToString("C")),
                @(item.ProductBasicsModel.ProductStorageModel.QuantityInBox),
                @((item.ProductBasicsModel.ProductPriceModel.Price * item.ProductBasicsModel.ProductStorageModel.QuantityInBox).ToString("C")),
                @(item.Quantity),
                @((item.ProductBasicsModel.ProductPriceModel.Price * item.ProductBasicsModel.ProductStorageModel.QuantityInBox * item.Quantity).ToString("C"))
            </div>
        }
    </div>

    <div class="ODVTotalPrice">
        <p>@(Math.Round(Model.OrderProductModels.Sum(e => e.Quantity * e.ProductBasicsModel.ProductPriceModel.Price * e.ProductBasicsModel.ProductStorageModel.QuantityInBox), 2)) $</p>
    </div>
</div>